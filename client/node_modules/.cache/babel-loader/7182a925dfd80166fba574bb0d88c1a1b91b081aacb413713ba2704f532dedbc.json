{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constraints/config.js';\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    console.log('ERROR IN RESPONSE: ', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log('ERROR IN REQUEST: ', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.log('ERROR IN NETWORK: ', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\nconst API = () => {\n  for (const [key, value] of Object.entries(SERVICE_URLS)) {\n    API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n      method: value.method,\n      url: value.url,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progressEvent) {\n        if (showUploadProgress) {\n          let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          showUploadProgress(percentageCompleted);\n        }\n      },\n      onDownloadProgress: function (progressEvent) {\n        if (showDownloadProgress) {\n          let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          showDownloadProgress(percentageCompleted);\n        }\n      }\n    });\n  }\n};\n_c = API;\nexport default API;\nvar _c;\n$RefreshReg$(_c, \"API\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","status","isSuccess","data","isFailure","msg","code","console","log","toJSON","isError","responseFailure","requestFailure","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","url","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress","_c","$RefreshReg$"],"sources":["/home/gasoni/Desktop/MyBlog/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constraints/config.js';\nconst API_URL = 'http://localhost:8000';\n\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n    timeout: 10000,\n    headers: {\n        \"Content-Type\": \"application/json\",\n    }\n})\n\n\naxiosInstance.interceptors.request.use(\n    function (config) {\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n)\n\n\naxiosInstance.interceptors.response.use(\n    function (response) {\n        return processResponse(response);\n    },\n    function (error) {\n        return Promise.reject(processError(error));\n    }\n)\n\n\nconst processResponse = (response) => {\n    if (response?.status === 200){\n        return { isSuccess: true, data: response.data} \n    }else{\n        return {\n            isFailure: true,\n            status: response?.status,\n            msg: response?.msg,\n            code: response?.code\n\n        }\n    }\n}\n\n\nconst processError = (error) => {\n    if(error.response){\n        console.log('ERROR IN RESPONSE: ', error.toJSON());\n        return{\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\n            code: error.response.status\n        }\n    }else if(error.request) {\n        console.log('ERROR IN REQUEST: ', error.toJSON());\n        return{\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\n            code: \"\"\n        }\n    }else{\n        console.log('ERROR IN NETWORK: ', error.toJSON());\n        return{\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.networkError,\n            code: \"\"\n        }\n    }\n}\n\nconst API = () => {\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\n        axiosInstance({\n            method: value.method,\n            url: value.url,\n            data: body,\n            responseType: value.responseType,\n            onUploadProgress: function(progressEvent){\n                if (showUploadProgress) {\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                    showUploadProgress(percentageCompleted);\n                }\n            },\n            onDownloadProgress: function(progressEvent){\n                if (showDownloadProgress) {\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                    showDownloadProgress(percentageCompleted);\n                }\n            }\n        })\n    }\n}\nexport default API"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}